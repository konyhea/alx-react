const eslint = require('eslint');
const stylelint = require('stylelint');
const path = require('path');
const fs = require('fs');
const ignore = require('ignore');
const defaultConfig = require('./config/default');

const sourceRoot = `${process.cwd()}/`;

/**
 * 判断一个插件是否为扫描插件
 * @param {string} id
 * @return {bool}
 */
function isScanPlugin(id) {
  const scanPluginIds = ['eslint', 'stylelint'];
  return scanPluginIds.includes(id);
}

/**
 * 拼 ESLint 规则链接
 * @param {string} ruleId
 * @return {string} link
 */
function getESLintRuleLink(ruleId) {
  if (ruleId.indexOf('react/') === 0) {
    return `Rule: [${ruleId}](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/${ruleId.replace(
      'react/',
      '',
    )}.md)`;
  } else if (ruleId.indexOf('vue/') === 0) {
    return `Rule: [${ruleId}](https://vuejs.github.io/eslint-plugin-vue/rules/${ruleId.replace(
      'vue/',
      '',
    )}.html)`;
  } else if (ruleId.indexOf('@typescript-eslint/') === 0) {
    return `Rule: [${ruleId}](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/${ruleId.replace(
      '@typescript-eslint/',
      '',
    )}.md)`;
  } else if (ruleId.indexOf('import/') === 0) {
    return `Rule: [${ruleId}](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/${ruleId.replace(
      'import/',
      '',
    )}.md)`;
  } else if (ruleId === 'babel/new-cap') {
    return 'Rule: [new-cap](http://eslint.org/docs/rules/new-cap)';
  } else {
    return `Rule: [${ruleId}](http://eslint.org/docs/rules/${ruleId})`;
  }
}

class Engine {
  constructor(userConfig) {
    this.config = Object.assign(Object.create(null), defaultConfig, userConfig);
  }

  /**
   * 对 files 执行扫描
   * @param {string[]} 文件路径数组
   * @returns {object[]} issue数组
   */
  async scanFiles(files) {
    const { ignores } = this.config;
    const userEslintIgnorePath = `${sourceRoot}.eslintignore`;

    let ignoreString = ignores.join('\n');
    if (fs.existsSync(userEslintIgnorePath)) {
      ignoreString += `\n${fs.readFileSync(userEslintIgnorePath, 'utf8')}`;
    }

    const ig = ignore().add(ignoreString);
    const notIgnoreFiles = files.filter(filepath => !ig.ignores(filepath.replace(sourceRoot, '')));

    const eslintIssues = this.runESLint(notIgnoreFiles);
    const allIssues = [...eslintIssues];

    return allIssues;
  }

  runESLint(files) {
    const allIssues = [];
    const { resolvePluginsRelativeTo, eslintType = 'default' } = this.config;
    const configFile = path.resolve(__dirname, `config/eslint/${eslintType}.js`);
    const filteredFiles = files.filter((filepath) => {
      const fileExt = require('path').extname(filepath);
      return /\.(js|jsx|ts|tsx|vue)$/.test(fileExt);
    });

    const eslintEngineOptions = {
      configFile,
      useEslintrc: false, // 如果不关这个参数，会将目录下的 eslintrc 与 configFile merge
      // globals: globals ? globals.split(',') : [],
    };
    if (resolvePluginsRelativeTo) {
      eslintEngineOptions.resolvePluginsRelativeTo = resolvePluginsRelativeTo;
    }
    const eslintEngine = new eslint.CLIEngine(eslintEngineOptions);

    if (filteredFiles.length) {
      const eslintResult = eslintEngine.executeOnFiles(filteredFiles);
      let result;
      if (eslintResult.results && eslintResult.results.length) {
        result = eslintResult.results;
      }
      if (result && result.length) {
        result.forEach((fileResult) => {
          const { filePath } = fileResult;
          const relativeFilePath = filePath.replace(sourceRoot, '');

          const fileIssues = (fileResult && fileResult.messages) || [];
          fileIssues.forEach((issue) => {
            let level = '';
            if (issue.fatal || issue.severity === 2) {
              level = 'Blocker';
            } else if (issue.severity === 1) {
              level = 'Critical';
            } else {
              level = 'Major';
            }

            let description = issue.ruleId ? getESLintRuleLink(issue.ruleId) : '';

            // 以 File ignored by default. 错误信息开头的，不计入 issue
            // 见 https://github.com/eslint/eslint/issues/4828
            if (
              issue.message &&
                issue.message.indexOf('File ignored by default.') === 0
            ) {
              return;
            }

            // 以 Parsing error. 开头的错误信息，只记录第一个换行前的内容（后面为报错行）
            // 且暂时报为 warn 级别
            if (
              issue.message &&
                issue.message.indexOf('Parsing error') === 0
            ) {
              issue.message = issue.message.split('\n')[0];
              level = 'Critical';
              description =
                  '解析错误，若代码无语法错误，请联系 @Ray 排查原因';
            }

            // 对 no-undef 做个特殊处理：提示用户在设置里可以添加
            if (issue.ruleId && issue.ruleId === 'no-undef') {
              description +=
                  '\n 此问题是使用了未经声明的变量导致。如果你的项目中允许使用这个全局变量，请在配置的 globals 字段中加入，下次扫描此 issue 即被忽略。';
            }

            allIssues.push({
              ruleName: issue.ruleId || 'SyntaxError',
              title: issue.message,
              description,
              level,
              plugin: 'eslint',
              beginLine: issue.line,
              beginColumn: issue.column,
              endLine: issue.endLine || issue.line, // endLine为空时设成跟beginLine一样，否则后端有bug
              endColumn: issue.endColumn,
              location: relativeFilePath,
              fileName: relativeFilePath,
            });
          });
        });
      }
    }

    return allIssues;
  }

  async runStylelint(files) {
    const allIssues = [];
    const configFile = path.resolve(__dirname, 'config/stylelint/index.js');
    const filteredFiles = files.filter((filepath) => {
      const fileExt = require('path').extname(filepath);
      return /\.(css|scss|less)$/.test(fileExt);
    });
    if (filteredFiles.length) {
      const errorLevelRules = getStylelintErrorLevelRules();
      // (async () => {
      const stylelintResult = await stylelint.lint({
        configFile,
        files: filteredFiles,
        fix: false,
        // syntax: 'scss',
      });
      if (stylelintResult && stylelintResult.errored) {
        const filesResult = JSON.parse(stylelintResult.output || '[]') || [];
        filesResult.forEach((fileResult) => {
          const { source: filePath } = fileResult;
          const relativeFilePath = filePath.replace(sourceRoot, '');

          const isssues = fileResult.warnings;
          isssues.forEach((issue) => {
            allIssues.push({
              ruleName: issue.rule || 'SyntaxError',
              title: issue.text,
              description: issue.rule
                ? `Rule: [${issue.rule}](http://stylelint.io/user-guide/rules/${issue.rule})`
                : '',
              level: errorLevelRules.includes(issue.rule)
                ? 'Blocker'
                : 'Critical', // 先统一输出成 Critical 级别
              plugin: 'stylelint',
              beginLine: issue.line,
              beginColumn: issue.column,
              endLine: issue.line, // endLine为空时设成跟beginLine一样，否则后端有bug
              endColumn: null,
              location: relativeFilePath,
              fileName: relativeFilePath,
            });
          });
        });
      }
    }

    return allIssues;
  }
}

module.exports = {
  Engine,
};
