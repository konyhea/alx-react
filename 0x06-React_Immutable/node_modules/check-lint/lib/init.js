const inquirer = require('inquirer')
const spawn = require('cross-spawn')
const { exec } = require('child_process');
const path = require('path')
const fs = require('fs-extra')
const { Linter } = require('eslint')
const log = require('../utils/log')

const cwd = process.cwd()
const { name: pkgName, version } = require('../package.json')

const targetPkgPath = path.resolve(cwd, 'package.json')

const chooseEslintType = async () => {
  const answer = await inquirer.prompt([
    {
      type: 'list',
      name: 'type',
      message: 'Step 1. 请选择项目的语言（JS/TS）和框架（React/Vue）类型：',
      choices: [
        {
          name: 'JavaScript + Vue 项目',
          value: 'vue',
        },
        {
          name: '小程序 + Vue 项目',
          value: 'mp',
        },
        {
          name: 'JavaScript 项目（未使用 React 和 Vue 的 JS 项目）',
          value: 'default',
        },
        {
          name: 'ES5 及之前版本的 JavaScript 老项目',
          value: 'es5',
        },
        // {
        //   name: 'TypeScript 项目（未使用 React 和 Vue 的 TS 项目）',
        //   value: 'typescript/default',
        // },
        // {
        //   name: 'TypeScript + Vue 项目',
        //   value: 'typescript/vue',
        // },
        // {
        //   name: 'JavaScript + React 项目',
        //   value: 'react',
        // },
        // {
        //   name: 'TypeScript + React 项目',
        //   value: 'typescript/react',
        // },
      ],
    },
  ])

  return answer.type
}

const initByType = {
  eslint: (type) => {
    const eslintrcSourcePath = path.resolve(__dirname, `config/eslint/${type}.js`)
    const eslintrcTargetPath = path.resolve(cwd, '.eslintrc.js')
    fs.writeFileSync(eslintrcTargetPath, fs.readFileSync(eslintrcSourcePath, 'utf8'))

    const eslintignoreSourcePath = path.resolve(__dirname, 'config/eslint/__eslintignore_template')
    const eslintignoreTargetPath = path.resolve(cwd, '.eslintignore')
    fs.writeFileSync(eslintignoreTargetPath, fs.readFileSync(eslintignoreSourcePath, 'utf8'))

    log.success('ESLint 配置写入成功')
  },
  stylelint: () => {
    const stylelintrcSourcePath = path.resolve(__dirname, 'config/stylelint/index.js');
    const stylelintrcTargetPath = path.resolve(cwd, '.stylelintrc.js');
    fs.writeFileSync(stylelintrcTargetPath, fs.readFileSync(stylelintrcSourcePath, 'utf8'));

    const stylelintignoreSourcePath = path.resolve(
      __dirname,
      'config/stylelint/__stylelintignore_template',
    );
    const stylelintignoreTargetPath = path.resolve(cwd, '.stylelintignore');
    fs.writeFileSync(stylelintignoreTargetPath, fs.readFileSync(stylelintignoreSourcePath, 'utf8'));

    log.success('stylelint 配置写入成功');
  },
  prettier: () => {
    const prettierConfigSourcePath = path.resolve(__dirname, 'config/prettier/index.js')
    const prettierConfigTargetPath = path.resolve(cwd, '.prettierrc.js')
    fs.writeFileSync(prettierConfigTargetPath, fs.readFileSync(prettierConfigSourcePath, 'utf8'))

    log.success('Prettier 配置写入成功')
  },
  editorconfig: () => {
    const editorconfigSourcePath = path.resolve(
      __dirname,
      'config/editorconfig/__editorconfig_template',
    )
    const editorconfigTargetPath = path.resolve(cwd, '.editorconfig')
    fs.writeFileSync(editorconfigTargetPath, fs.readFileSync(editorconfigSourcePath, 'utf8'))

    log.success('.editorconfig 写入成功')
  },
  vscode: () => {
    const editorconfigSourcePath = path.resolve(
      __dirname,
      'config/editorconfig/__vscode_template',
    )
    const vscodeFolder = cwd + '/.vscode/';

    if (!fs.existsSync(vscodeFolder)) {
      fs.mkdirSync(vscodeFolder)
    }
    const editorconfigTargetPath = path.resolve(vscodeFolder, 'settings.json')
    fs.writeFileSync(editorconfigTargetPath, fs.readFileSync(editorconfigSourcePath, 'utf8'))

    log.success('.vscode 写入成功')
  }
}

const init = async (cmdObj) => {
  const targetPkg = require(targetPkgPath)
  let eslintType = await chooseEslintType()

  log.info('写入配置文件')
  const plugins = ['eslint', 'stylelint', 'vscode', 'editorconfig']
  for (const type of plugins) {
    if (initByType[type]) {
      if (type === 'eslint') {
        initByType[type](eslintType)
      } else {
        initByType[type]()
      }
    }
  }
  log.success('写入配置文件成功 :D')

  log.info('配置 git commit 卡点')
  if (!targetPkg.husky) {
    targetPkg.husky = {
      hooks: {},
    }
  }
  targetPkg.husky.hooks['pre-commit'] = `lint-staged`
  targetPkg['lint-staged'] = {}
  targetPkg['lint-staged']['**/*.{js,jsx,ts,tsx,vue}'] = ['eslint --fix', 'git add']
  targetPkg['lint-staged']['**/*.{css,scss,less}'] = ['stylelint --fix', 'git add']

  
  log.info('安装依赖')
  const deps = {
    'husky': '^4.2.5',
    'lint-staged': '^10.2.8',
    'eslint': '^7.1.0',
    'eslint-config-sendinfo': 'latest',
    'eslint-plugin-import': '^2.20.2',
    'eslint-plugin-vue': '^7.0.0-alpha.5',
    'vue-eslint-parser': '^7.1.0',
    'stylelint-config-sendinfo': 'latest',
    'stylelint-scss': '^3.17.2',
    'stylelint': '^13.6.0',
  };
  // FIXME: 有时devDependencies加不上
  if (!targetPkg.devDependencies) {
    targetPkg.devDependencies = {}
  } 
  Object.keys(deps).forEach(pkgName => {
    targetPkg.devDependencies[pkgName] = deps[pkgName]
  })
  spawn.sync(
    'npm',
    [
      'i'
    ],
    {
      // cwd: path.resolve('.'),
      stdio: 'inherit',
    },
  )

  fs.writeFileSync(targetPkgPath, JSON.stringify(targetPkg, null, '  '))
  
  log.success('安装依赖成功 :D')
  log.success('配置commit卡点成功 :D')

  // 完成信息
  const logs = [`${pkgName} 初始化完成 :D`].join('\r\n')
  log.success(logs)
}

module.exports = init
